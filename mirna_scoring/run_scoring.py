# This script is used to run the socring on a network aready generated by mirKatnetwork.
# It will need the path of a network file, the steps for the random walk, the key words for the pathways and the numbers of samples for the random walk.
import argparse
import sys
import os

import sys
import os.path

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
os.chdir(BASE_DIR)
pwd = os.getcwd()
import mirna_scoring.scoring as scoring



## This is to run and get the DDS. The arguments are the yml file with the name of the comparisons and the path where the DDS file is

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run microRNA scoring')
    parser.add_argument('--network_path', type=str, help='Path to the network file')
    parser.add_argument('--steps', type=int, help='Number of steps for the random walk')
    parser.add_argument('--keywords', type=str, nargs='+', help='Keywords for the pathways')
    parser.add_argument('--samples', type=int, help='Number of samples for the random walk')
    parser.add_argument('--save_name', type=str, help='Path to save the results')
    args = parser.parse_args()

    if not os.path.exists(args.network_path):
        print(f"Network file not found: {args.network_path}")
        sys.exit(1)
    if not os.path.exists(os.path.dirname(args.save_name)):
        print(f"Save path does not exist: {os.path.dirname(args.save_name)}")
    if not args.keywords:
        print("No keywords provided for the pathways. Please provide at least one keyword.")
    if args.steps <= 0:
        print("Number of steps must be a positive integer.")
    if args.samples <= 0:
        print("Number of samples must be a positive integer.")
    if not args.save_name:
        print("Please provide a valid save name for the results.")
    if args.keywords is None:
        print("No keywords provided for the pathways. Please provide at least one keyword.")
    if not args.network_path:
        print("Please provide a valid path to the network file.")
    if not args.steps:
        print("Please provide a valid number of steps for the random walk.")
    if not args.samples:
        print("Please provide a valid number of samples for the random walk.")
    if not args.save_name:
        print("Please provide a valid save name for the results.")
    if not args.network_path or not args.steps or not args.keywords or not args.samples or not args.save_name:
        parser.print_help()
        sys.exit(1)
    print(f"Running microRNA scoring with the following parameters:\n"
          f"Network Path: {args.network_path}\n"
          f"Steps: {args.steps}\n"
          f"Keywords: {args.keywords}\n"
          f"Samples: {args.samples}\n"
          f"Save Name: {args.save_name}")
    # Run the  scoring
    scores = scoring.scoring(network_path=args.network_path, steps=args.steps, keywords=args.keywords, samples=args.samples, save_name=args.save_name)
    evaluation_df = scores.score_mirnas()
    scores.save_results(evaluation_df)

